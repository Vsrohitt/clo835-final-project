{"filter":false,"title":"app.py","tooltip":"/app/app.py","undoManager":{"mark":1,"position":1,"stack":[[{"start":{"row":0,"column":0},"end":{"row":74,"column":0},"action":"insert","lines":["# app/app.py","import os, boto3, logging","from flask import Flask, render_template, request, redirect, url_for","from flask_mysqldb import MySQL","","app = Flask(__name__)","logging.basicConfig(level=logging.INFO)","logger = logging.getLogger(__name__)","","app.config['MYSQL_HOST'] = os.environ.get('MYSQL_HOST', 'mysql-service')","app.config['MYSQL_USER'] = os.environ.get('MYSQL_USER', 'root')","app.config['MYSQL_PASSWORD'] = os.environ.get('MYSQL_PASSWORD', 'password')","app.config['MYSQL_DB'] = os.environ.get('MYSQL_DB', 'employees')","mysql = MySQL(app)","","GROUP_NAME = os.environ.get('GROUP_NAME', 'Default Group')","GROUP_SLOGAN = os.environ.get('GROUP_SLOGAN', 'Default Slogan')","BACKGROUND_IMAGE_URL = os.environ.get('BACKGROUND_IMAGE_URL', '')","","AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')","AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')","AWS_SESSION_TOKEN = os.environ.get('AWS_SESSION_TOKEN', '')","","def download_background_image():","    if not BACKGROUND_IMAGE_URL or not BACKGROUND_IMAGE_URL.startswith('s3://'):","        return None","    try:","        bucket = BACKGROUND_IMAGE_URL.replace('s3://','').split('/')[0]","        key = '/'.join(BACKGROUND_IMAGE_URL.replace('s3://','').split('/')[1:])","        s3 = boto3.client('s3',","            aws_access_key_id=AWS_ACCESS_KEY_ID,","            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,","            aws_session_token=AWS_SESSION_TOKEN)","        local_path = os.path.join('static', 'background.jpg')","        s3.download_file(bucket, key, local_path)","        return 'background.jpg'","    except Exception as e:","        logger.error(f\"S3 download error: {e}\")","        return None","","@app.route('/')","def index():","    bg = download_background_image()","    return render_template('index.html',","                           group_name=GROUP_NAME,","                           group_slogan=GROUP_SLOGAN,","                           background_image=bg)","","@app.route('/employees')","def employees():","    try:","        cur = mysql.connection.cursor()","        cur.execute(\"SELECT id, name, position, department FROM employees\")","        data = cur.fetchall()","        cur.close()","        return render_template('employees.html', employees=data)","    except Exception as e:","        return f\"Database error: {e}\"","","@app.route('/add_employee', methods=['GET','POST'])","def add_employee():","    if request.method == 'POST':","        name = request.form['name']; position = request.form['position']; department = request.form['department']","        try:","            cur = mysql.connection.cursor()","            cur.execute(\"INSERT INTO employees (name, position, department) VALUES (%s,%s,%s)\", (name, position, department))","            mysql.connection.commit(); cur.close()","            return redirect(url_for('employees'))","        except Exception as e:","            return f\"Error adding employee: {e}\"","    return render_template('add_employee.html')","","if __name__ == '__main__':","    app.run(host='0.0.0.0', port=81, debug=True)",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":74,"column":0},"action":"remove","lines":["# app/app.py","import os, boto3, logging","from flask import Flask, render_template, request, redirect, url_for","from flask_mysqldb import MySQL","","app = Flask(__name__)","logging.basicConfig(level=logging.INFO)","logger = logging.getLogger(__name__)","","app.config['MYSQL_HOST'] = os.environ.get('MYSQL_HOST', 'mysql-service')","app.config['MYSQL_USER'] = os.environ.get('MYSQL_USER', 'root')","app.config['MYSQL_PASSWORD'] = os.environ.get('MYSQL_PASSWORD', 'password')","app.config['MYSQL_DB'] = os.environ.get('MYSQL_DB', 'employees')","mysql = MySQL(app)","","GROUP_NAME = os.environ.get('GROUP_NAME', 'Default Group')","GROUP_SLOGAN = os.environ.get('GROUP_SLOGAN', 'Default Slogan')","BACKGROUND_IMAGE_URL = os.environ.get('BACKGROUND_IMAGE_URL', '')","","AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')","AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')","AWS_SESSION_TOKEN = os.environ.get('AWS_SESSION_TOKEN', '')","","def download_background_image():","    if not BACKGROUND_IMAGE_URL or not BACKGROUND_IMAGE_URL.startswith('s3://'):","        return None","    try:","        bucket = BACKGROUND_IMAGE_URL.replace('s3://','').split('/')[0]","        key = '/'.join(BACKGROUND_IMAGE_URL.replace('s3://','').split('/')[1:])","        s3 = boto3.client('s3',","            aws_access_key_id=AWS_ACCESS_KEY_ID,","            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,","            aws_session_token=AWS_SESSION_TOKEN)","        local_path = os.path.join('static', 'background.jpg')","        s3.download_file(bucket, key, local_path)","        return 'background.jpg'","    except Exception as e:","        logger.error(f\"S3 download error: {e}\")","        return None","","@app.route('/')","def index():","    bg = download_background_image()","    return render_template('index.html',","                           group_name=GROUP_NAME,","                           group_slogan=GROUP_SLOGAN,","                           background_image=bg)","","@app.route('/employees')","def employees():","    try:","        cur = mysql.connection.cursor()","        cur.execute(\"SELECT id, name, position, department FROM employees\")","        data = cur.fetchall()","        cur.close()","        return render_template('employees.html', employees=data)","    except Exception as e:","        return f\"Database error: {e}\"","","@app.route('/add_employee', methods=['GET','POST'])","def add_employee():","    if request.method == 'POST':","        name = request.form['name']; position = request.form['position']; department = request.form['department']","        try:","            cur = mysql.connection.cursor()","            cur.execute(\"INSERT INTO employees (name, position, department) VALUES (%s,%s,%s)\", (name, position, department))","            mysql.connection.commit(); cur.close()","            return redirect(url_for('employees'))","        except Exception as e:","            return f\"Error adding employee: {e}\"","    return render_template('add_employee.html')","","if __name__ == '__main__':","    app.run(host='0.0.0.0', port=81, debug=True)",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":117,"column":0},"action":"insert","lines":["# app/app.py","import os","import boto3","import logging","from flask import Flask, render_template, request, redirect, url_for","from flask_mysqldb import MySQL","","# --- Resolve template/static paths (this file lives in /app/app.py) ---","BASE_DIR = os.path.dirname(os.path.abspath(__file__))","TEMPLATES_DIR = os.path.join(BASE_DIR, '..', 'templates')","STATIC_DIR = os.path.join(BASE_DIR, '..', 'static')","","app = Flask(__name__, template_folder=TEMPLATES_DIR, static_folder=STATIC_DIR)","","# --- Logging ---","logging.basicConfig(level=logging.INFO)","logger = logging.getLogger(__name__)","","# --- MySQL config (from env in Kubernetes) ---","app.config['MYSQL_HOST'] = os.environ.get('MYSQL_HOST', 'mysql-service')","app.config['MYSQL_USER'] = os.environ.get('MYSQL_USER', 'root')","app.config['MYSQL_PASSWORD'] = os.environ.get('MYSQL_PASSWORD', 'password')","app.config['MYSQL_DB'] = os.environ.get('MYSQL_DB', 'employees')","mysql = MySQL(app)","","# --- App config (from ConfigMap) ---","GROUP_NAME = os.environ.get('GROUP_NAME', 'Default Group')","GROUP_SLOGAN = os.environ.get('GROUP_SLOGAN', 'Default Slogan')","BACKGROUND_IMAGE_URL = os.environ.get('BACKGROUND_IMAGE_URL', '')","","# --- AWS creds (from Secret in Kubernetes) ---","AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')","AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')","AWS_SESSION_TOKEN = os.environ.get('AWS_SESSION_TOKEN', '')","","def download_background_image():","    \"\"\"","    Download background image from S3 and store at /static/background.jpg.","    Skips download if URL or creds are missing (useful for local Docker run).","    \"\"\"","    if not BACKGROUND_IMAGE_URL or not BACKGROUND_IMAGE_URL.startswith('s3://'):","        return None","    if not AWS_ACCESS_KEY_ID or not AWS_SECRET_ACCESS_KEY or not AWS_SESSION_TOKEN:","        # Likely running locally without AWS creds; skip quietly","        logger.info(\"AWS creds not set; skipping S3 background download.\")","        return None","","    try:","        s3_path = BACKGROUND_IMAGE_URL.replace('s3://', '')","        bucket = s3_path.split('/')[0]","        key = '/'.join(s3_path.split('/')[1:])","","        s3 = boto3.client(","            's3',","            aws_access_key_id=AWS_ACCESS_KEY_ID,","            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,","            aws_session_token=AWS_SESSION_TOKEN","        )","","        os.makedirs(app.static_folder, exist_ok=True)","        local_path = os.path.join(app.static_folder, 'background.jpg')","        s3.download_file(bucket, key, local_path)","        logger.info(\"Downloaded background image to %s\", local_path)","        return 'background.jpg'","    except Exception as e:","        logger.error(f\"S3 download error: {e}\")","        return None","","@app.route('/healthz')","def healthz():","    return \"ok\", 200","","@app.route('/')","def index():","    bg = download_background_image()","    return render_template(","        'index.html',","        group_name=GROUP_NAME,","        group_slogan=GROUP_SLOGAN,","        background_image=bg","    )","","@app.route('/employees')","def employees():","    try:","        cur = mysql.connection.cursor()","        cur.execute(\"SELECT id, name, position, department FROM employees\")","        data = cur.fetchall()","        cur.close()","        return render_template('employees.html', employees=data)","    except Exception as e:","        # Show a friendly message if DB isn’t reachable locally","        logger.error(f\"Database error: {e}\")","        return f\"Database error: {e}\"","","@app.route('/add_employee', methods=['GET', 'POST'])","def add_employee():","    if request.method == 'POST':","        name = request.form['name']","        position = request.form['position']","        department = request.form['department']","        try:","            cur = mysql.connection.cursor()","            cur.execute(","                \"INSERT INTO employees (name, position, department) VALUES (%s, %s, %s)\",","                (name, position, department)","            )","            mysql.connection.commit()","            cur.close()","            return redirect(url_for('employees'))","        except Exception as e:","            logger.error(f\"Error adding employee: {e}\")","            return f\"Error adding employee: {e}\"","    return render_template('add_employee.html')","","if __name__ == '__main__':","    app.run(host='0.0.0.0', port=81, debug=True)",""]}]]},"ace":{"folds":[],"scrolltop":1074,"scrollleft":0,"selection":{"start":{"row":117,"column":0},"end":{"row":117,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":66,"state":"start","mode":"ace/mode/python"}},"timestamp":1754863896812,"hash":"2081360f48d67f128ee3f572d653a3fb9d3b39b8"}